{"mappings":"ACAA,SAAS,gBAAgB,CAAC,mBAAoB,WAC1C,IAAM,EAAa,SAAS,cAAc,CAAC,UAG3C,SAAS,EAAsB,CAAK,EAChC,IAAM,EAAW,SAAS,cAAc,CAAC,CAAC,EAAE,EAAM,EAAE,CAAC,MAAM,CAAC,EAC5D,GAAK,EAOD,EAAS,WAAW,CAAG,EAAM,iBAAiB,KAPnC,CACX,IAAM,EAAe,SAAS,aAAa,CAAC,OAC5C,CAAA,EAAa,EAAE,CAAG,CAAC,EAAE,EAAM,EAAE,CAAC,MAAM,CAAC,CACrC,EAAa,SAAS,CAAC,GAAG,CAAC,QAAS,eACpC,EAAa,WAAW,CAAG,EAAM,iBAAiB,CAClD,EAAM,UAAU,CAAC,YAAY,CAAC,EAAc,EAAM,WAAW,CACjE,CAGA,EAAM,SAAS,CAAC,GAAG,CAAC,aACxB,CAGA,eAAe,EAAsB,CAAK,EACtC,GAAI,CAQA,MAAO,AAPU,CAAA,MAAM,MAAM,kCAAmC,CAC5D,OAAQ,OACR,QAAS,CACL,eAAgB,kBACpB,EACA,KAAM,KAAK,SAAS,CAAC,EACzB,EAAA,EACgB,EAAE,AACtB,CAAE,MAAO,EAAO,CAEZ,OADA,QAAQ,KAAK,CAAC,2BAA4B,GACnC,CAAA,CACX,CACJ,CAGA,EAAW,gBAAgB,CAAC,SAAU,eAAe,CAAK,EACtD,EAAM,cAAc,GAEpB,IAAM,EAAO,SAAS,cAAc,CAAC,gBAC/B,EAAQ,SAAS,cAAc,CAAC,SAChC,EAAM,SAAS,cAAc,CAAC,OAC9B,EAAiB,SAAS,cAAc,CAAC,kBACzC,EAAkB,SAAS,cAAc,CAAC,mBAC1C,EAAe,SAAS,cAAc,CAAC,gBACvC,EAAoB,SAAS,cAAc,CAAC,qBAC5C,EAAuB,SAAS,cAAc,CAAC,wBAC/C,EAAS,SAAS,aAAa,CAAC,gCAChC,EAAQ,SAAS,cAAc,CAAC,SAEtC,GAAI,CAAC,EAAW,aAAa,GAAI,CAE7B,EAAsB,GACtB,EAAsB,GACtB,EAAsB,GACtB,EAAsB,GACtB,EAAsB,GAClB,GAAc,EAAsB,GACxC,EAAsB,GACtB,MACJ,CAGA,IAAM,EAAkB,CACpB,KAAM,EAAK,KAAK,CAChB,MAAO,EAAM,KAAK,CAClB,IAAK,EAAI,KAAK,CACd,eAAgB,EAAe,KAAK,CACpC,gBAAiB,EAAgB,KAAK,CACtC,aAAc,EAAe,EAAa,KAAK,CAAG,KAClD,kBAAmB,EAAkB,OAAO,CAC5C,qBAAsB,EAAqB,OAAO,CAClD,OAAQ,EAAS,EAAO,KAAK,CAAG,KAChC,MAAO,EAAM,KAAK,AACtB,CAGgB,OAAM,EAAsB,GAExC,OAAO,QAAQ,CAAC,IAAI,CAAG,8BAEvB,QAAQ,KAAK,CAAC,gDAEtB,EACJ","sources":["<anon>","app/pages/cadastro/cadastro.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", function() {\n    const formulario = document.getElementById(\"myForm\");\n    // Função para mostrar mensagem de erro\n    function mostrarMensagemDeErro(campo) {\n        const spanErro = document.getElementById(`${campo.id}-error`);\n        if (!spanErro) {\n            const errorElement = document.createElement(\"span\");\n            errorElement.id = `${campo.id}-error`;\n            errorElement.classList.add(\"error\", \"text-danger\");\n            errorElement.textContent = campo.validationMessage;\n            campo.parentNode.insertBefore(errorElement, campo.nextSibling);\n        } else spanErro.textContent = campo.validationMessage;\n        campo.classList.add(\"is-invalid\");\n    }\n    // Função para salvar os dados no JSON Server\n    async function salvarDadosNoServidor(dados) {\n        try {\n            const response = await fetch(\"http://localhost:3000/cadastros\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(dados)\n            });\n            return response.ok;\n        } catch (error) {\n            console.error(\"Erro ao salvar os dados:\", error);\n            return false;\n        }\n    }\n    // Evento de submit do formulário\n    formulario.addEventListener(\"submit\", async function(event) {\n        event.preventDefault(); // Evitar envio do formulário\n        const nome = document.getElementById(\"nomeCompleto\");\n        const email = document.getElementById(\"email\");\n        const cpf = document.getElementById(\"cpf\");\n        const dataNascimento = document.getElementById(\"dataNascimento\");\n        const telefoneCelular = document.getElementById(\"telefoneCelular\");\n        const telefoneFixo = document.getElementById(\"telefoneFixo\"); // Novo campo\n        const promocoesWhatsApp = document.getElementById(\"promocoesWhatsApp\"); // Novo campo\n        const atualizacoesWhatsApp = document.getElementById(\"atualizacoesWhatsApp\"); // Novo campo\n        const genero = document.querySelector('input[name=\"genero\"]:checked'); // Novo campo\n        const senha = document.getElementById(\"senha\");\n        if (!formulario.checkValidity()) {\n            // Se o formulário não for válido, exibir mensagens de erro\n            mostrarMensagemDeErro(nome);\n            mostrarMensagemDeErro(email);\n            mostrarMensagemDeErro(cpf);\n            mostrarMensagemDeErro(dataNascimento);\n            mostrarMensagemDeErro(telefoneCelular);\n            if (telefoneFixo) mostrarMensagemDeErro(telefoneFixo); // Validar campo opcional\n            mostrarMensagemDeErro(senha);\n            return;\n        }\n        // Criar objeto com os dados do formulário\n        const dadosFormulario = {\n            nome: nome.value,\n            email: email.value,\n            cpf: cpf.value,\n            dataNascimento: dataNascimento.value,\n            telefoneCelular: telefoneCelular.value,\n            telefoneFixo: telefoneFixo ? telefoneFixo.value : null,\n            promocoesWhatsApp: promocoesWhatsApp.checked,\n            atualizacoesWhatsApp: atualizacoesWhatsApp.checked,\n            genero: genero ? genero.value : null,\n            senha: senha.value\n        };\n        // Tentar salvar os dados no JSON Server\n        const sucesso = await salvarDadosNoServidor(dadosFormulario);\n        if (sucesso) window.location.href = \"/app/pages/login/login.html\"; // Redirecionar para a página de login\n        else console.error(\"Erro ao realizar o cadastro. Tente novamente.\");\n    });\n});\n\n//# sourceMappingURL=cadastro.d3f7bb0a.js.map\n","document.addEventListener('DOMContentLoaded', function() {\r\n    const formulario = document.getElementById('myForm');\r\n\r\n    // Função para mostrar mensagem de erro\r\n    function mostrarMensagemDeErro(campo) {\r\n        const spanErro = document.getElementById(`${campo.id}-error`);\r\n        if (!spanErro) {\r\n            const errorElement = document.createElement('span');\r\n            errorElement.id = `${campo.id}-error`;\r\n            errorElement.classList.add('error', 'text-danger');\r\n            errorElement.textContent = campo.validationMessage;\r\n            campo.parentNode.insertBefore(errorElement, campo.nextSibling);\r\n        } else {\r\n            spanErro.textContent = campo.validationMessage;\r\n        }\r\n        campo.classList.add('is-invalid');\r\n    }\r\n\r\n    // Função para salvar os dados no JSON Server\r\n    async function salvarDadosNoServidor(dados) {\r\n        try {\r\n            const response = await fetch('http://localhost:3000/cadastros', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(dados)\r\n            });\r\n            return response.ok;\r\n        } catch (error) {\r\n            console.error('Erro ao salvar os dados:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Evento de submit do formulário\r\n    formulario.addEventListener('submit', async function(event) {\r\n        event.preventDefault(); // Evitar envio do formulário\r\n\r\n        const nome = document.getElementById('nomeCompleto');\r\n        const email = document.getElementById('email');\r\n        const cpf = document.getElementById('cpf');\r\n        const dataNascimento = document.getElementById('dataNascimento');\r\n        const telefoneCelular = document.getElementById('telefoneCelular');\r\n        const telefoneFixo = document.getElementById('telefoneFixo'); // Novo campo\r\n        const promocoesWhatsApp = document.getElementById('promocoesWhatsApp'); // Novo campo\r\n        const atualizacoesWhatsApp = document.getElementById('atualizacoesWhatsApp'); // Novo campo\r\n        const genero = document.querySelector('input[name=\"genero\"]:checked'); // Novo campo\r\n        const senha = document.getElementById('senha');\r\n\r\n        if (!formulario.checkValidity()) {\r\n            // Se o formulário não for válido, exibir mensagens de erro\r\n            mostrarMensagemDeErro(nome);\r\n            mostrarMensagemDeErro(email);\r\n            mostrarMensagemDeErro(cpf);\r\n            mostrarMensagemDeErro(dataNascimento);\r\n            mostrarMensagemDeErro(telefoneCelular);\r\n            if (telefoneFixo) mostrarMensagemDeErro(telefoneFixo); // Validar campo opcional\r\n            mostrarMensagemDeErro(senha);\r\n            return;\r\n        }\r\n\r\n        // Criar objeto com os dados do formulário\r\n        const dadosFormulario = {\r\n            nome: nome.value,\r\n            email: email.value,\r\n            cpf: cpf.value,\r\n            dataNascimento: dataNascimento.value,\r\n            telefoneCelular: telefoneCelular.value,\r\n            telefoneFixo: telefoneFixo ? telefoneFixo.value : null, // Novo campo\r\n            promocoesWhatsApp: promocoesWhatsApp.checked, // Novo campo\r\n            atualizacoesWhatsApp: atualizacoesWhatsApp.checked, // Novo campo\r\n            genero: genero ? genero.value : null, // Novo campo\r\n            senha: senha.value\r\n        };\r\n\r\n        // Tentar salvar os dados no JSON Server\r\n        const sucesso = await salvarDadosNoServidor(dadosFormulario);\r\n        if (sucesso) {\r\n            window.location.href = '/app/pages/login/login.html'; // Redirecionar para a página de login\r\n        } else {\r\n            console.error('Erro ao realizar o cadastro. Tente novamente.');\r\n        }\r\n    });\r\n});\r\n"],"names":["document","addEventListener","formulario","getElementById","mostrarMensagemDeErro","campo","spanErro","id","textContent","validationMessage","errorElement","createElement","classList","add","parentNode","insertBefore","nextSibling","salvarDadosNoServidor","dados","response","fetch","method","headers","body","JSON","stringify","ok","error","console","event","preventDefault","nome","email","cpf","dataNascimento","telefoneCelular","telefoneFixo","promocoesWhatsApp","atualizacoesWhatsApp","genero","querySelector","senha","checkValidity","dadosFormulario","value","checked","window","location","href"],"version":3,"file":"cadastro.d3f7bb0a.js.map"}